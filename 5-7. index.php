<?php
	// Создание области видимости, реализовано для того чтоб домашнее задание сделать в 1 файлике
	namespace p1;
		// Объявление класса
		class A {
			// Объявление публичной функции
		    public function foo() {
		    	// определение статической переменной
		        static $x = 0;
		        // инкремент переменной ($x = $x + 1) и вывод её на экран
		        echo ++$x;
		    }
		}
	
	echo "p1: ";
	// Создание класса
	$a1 = new A();
	// Создание класса
	$a2 = new A();
	// Вызов функции
	$a1->foo();		// покажет 1
	// Вызов функции
	$a2->foo();		// покажет 2
	// Вызов функции
	$a1->foo();		// покажет 3
	// Вызов функции
	$a2->foo();		// покажет 4
	
	/*
	 * Это происходит потому, что переменная static при создании объекта в функции объявляется только 1 раз, а при повторном вызове цункции интерпретатор видит что она уже была создана и игнорирует строчку создания
	 */
	 
	// Создание области видимости, реализовано для того чтоб домашнее задание сделать в 1 файлике
	namespace p2;
	 
	class A {
	    public function foo() {
	        static $x = 0;
	        echo ++$x;
	    }
	}
	// Создание второго класса, расширяющего класс A
	class B extends A {
	}
	echo "<br>p2: ";
	$a1 = new \p2\A();
	$b1 = new \p2\B();
	$a1->foo();		// покажет 1
	$b1->foo();		// покажет 1
	$a1->foo();		// покажет 2
	$b1->foo();		// покажет 2
	
	/*
	 * Это происходит потому, что создаётся 2 разных класса, две разных области выполнения, класс А и класс В, переменная static у каждого своя и во время "жизни" класса она остаётся и инкрементируется тоже каждая в своё классе.
	 */
	 
	 
	namespace p3;
	
	class A {
		// function __construct($a, $c){;}
	    public function foo() {
	        static $x = 0;
	        echo ++$x;
	    }
	}
	class B extends A {
	}
	echo "<br>p3: ";
	$a1 = new A;
	$b1 = new B;
	$a1->foo();		// покажет 1
	$b1->foo();		// покажет 1
	$a1->foo();		// покажет 2
	$b1->foo();		// покажет 2
	
	/*
	 * Результат выполнение будет как в namespace p2, ничего не изменилось, за исключением отсутствия скобок в классах, если бы у нас был __construct с входными переменными, была бы фатальная ошибка, а т.к. её нет, можно создать класс без скобок. Раскомментируйте __construct и увидите.
	 */
?>